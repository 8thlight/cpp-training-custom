Constructors/destructors
------------------------

Now we are familiar with the basic syntax for
declaring classes in C++ let's look at some
methods that are common to all classes, those
for initialisation, copying and cleanup of the
class.

Consider the most basic declaration:

class A {};

This doesn't feel like it can do much but
with just this declaration we can write code
like

{
  A a1;     // construction
  A a2(a1)  // copy construction
  A a3 = a1 // assignment
}
// all the variables destructed here

All of these things are achieved via functions
which will be generated by the compiler if we
don't provide some of them.

Signatures of these functions are provided in
basic_functions.hpp


Inheritance / Polymorphism
--------------------------

Inheritance - sharing Code through parent/child relationships
Polymorphism - allows routines to use variables of different
               through a common interface

Both of these concepts are important in OO design.

In this section we will look at how these are implemented
in C++.

Start by looking at the example code in inheritance.cpp

Next move onto to polymorphism.cpp

Exercise: write classes in Animal.hpp / Animal.cpp to make
          test in animal_test.cpp pass
